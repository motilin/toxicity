{"version":3,"sources":["InputField.js","Results.js","App.js","reportWebVitals.js","index.js"],"names":["InputField","setSentence","inputBox","useRef","initialValue","useState","value","setValue","onChange","e","target","useInput","props","submit","useEffect","current","focus","onSubmit","preventDefault","type","className","ref","Results","sentence","loading","setLoading","result","setResult","toxicity","then","model","classify","prediction","map","d","label","results","probabilities","App","document","title","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"kWAEe,SAASA,EAAT,GAAsC,IAAhBC,EAAe,EAAfA,YAC7BC,EAAWC,iBAAO,MAYxB,EAXiB,SAACC,GAChB,MAA0BC,mBAASD,GAAnC,mBAAOE,EAAP,KAAcC,EAAd,KACA,MAAO,CACL,CAAED,QAAOE,SAAU,SAACC,GAAD,OAAOF,EAASE,EAAEC,OAAOJ,SAC5C,WACEL,EAAYK,KAMMK,CAAS,IAAjC,mBAAOC,EAAP,KAAcC,EAAd,KAWA,OAJAC,qBAAU,WACRZ,EAASa,QAAQC,UAChB,IAGD,uBAAMC,SAVR,SAAkBR,GAChBA,EAAES,iBACFL,KAQA,UACE,sCAAUM,KAAK,OAAOC,UAAU,WAAWC,IAAKnB,GAAcU,IAC9D,wBAAQQ,UAAU,cAAlB,sB,oBCzBS,SAASE,EAAT,GAAgC,IAAbC,EAAY,EAAZA,SAChC,EAA8BlB,oBAAS,GAAvC,mBAAOmB,EAAP,KAAgBC,EAAhB,KACA,EAA4BpB,mBAAS,IAArC,mBAAOqB,EAAP,KAAeC,EAAf,KAeA,OAbAb,qBAAU,WACR,GAAIS,EAAU,CACZE,GAAW,GAEXG,IADkB,IACOC,MAAK,SAACC,GAC7BA,EAAMC,SAAS,CAACR,IAAWM,MAAK,SAACG,GAC/BP,GAAW,GACXE,EAAUK,YAIf,CAACT,IAEAC,EAAgB,oBAAIJ,UAAU,UAAd,6BAGlB,qBAAKA,UAAU,SAAf,SACGM,EAAOO,KAAI,SAACC,GAAD,OACV,gCACGA,EAAEC,MADL,WACoBD,EAAEE,QAAQ,GAAGC,cAAc,WCtBxC,SAASC,IACtBC,SAASC,MAAQ,WACjB,MAAgCnC,qBAAhC,mBAAOkB,EAAP,KAAiBtB,EAAjB,KAEA,OACE,qCACE,cAACD,EAAD,CAAYC,YAAaA,IACzB,cAACqB,EAAD,CAASC,SAAUA,OCZzB,IAYekB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFZ,SAASa,eAAe,SAM1BX,M","file":"static/js/main.bdc1645b.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\n\r\nexport default function InputField({ setSentence }) {\r\n  const inputBox = useRef(null);\r\n  const useInput = (initialValue) => {\r\n    const [value, setValue] = useState(initialValue);\r\n    return [\r\n      { value, onChange: (e) => setValue(e.target.value) },\r\n      () => {\r\n        setSentence(value);\r\n        // setValue(initialValue);\r\n      },\r\n    ];\r\n  };\r\n\r\n  const [props, submit] = useInput(\"\");\r\n\r\n  function onSubmit(e) {\r\n    e.preventDefault();\r\n    submit();\r\n  }\r\n\r\n  useEffect(() => {\r\n    inputBox.current.focus();\r\n  }, []);\r\n\r\n  return (\r\n    <form onSubmit={onSubmit}>\r\n      <textarea type=\"text\" className=\"inputBox\" ref={inputBox} {...props} />\r\n      <button className=\"checkButton\">Check</button>\r\n    </form>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport * as toxicity from \"@tensorflow-models/toxicity\";\r\nimport \"@tensorflow/tfjs\";\r\n\r\nexport default function Results({ sentence }) {\r\n  const [loading, setLoading] = useState(false);\r\n  const [result, setResult] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (sentence) {\r\n      setLoading(true);\r\n      const threshold = 0.5;\r\n      toxicity.load(threshold).then((model) => {\r\n        model.classify([sentence]).then((prediction) => {\r\n          setLoading(false);\r\n          setResult(prediction);\r\n        });\r\n      });\r\n    }\r\n  }, [sentence]);\r\n\r\n  if (loading) return <h2 className=\"loading\">calculating ...</h2>;\r\n\r\n  return (\r\n    <div className=\"result\">\r\n      {result.map((d) => (\r\n        <pre>\r\n          {d.label} &emsp; {d.results[0].probabilities[1]}\r\n        </pre>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","import \"./App.css\";\nimport React, { useState } from \"react\";\nimport InputField from \"./InputField\";\nimport Results from \"./Results\";\n\nexport default function App() {\n  document.title = 'toxicity'\n  const [sentence, setSentence] = useState();\n\n  return (\n    <>\n      <InputField setSentence={setSentence} />\n      <Results sentence={sentence} />\n    </>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}